
public record Person(int Id, string GivenName, string FamilyName,
    DateTime StartDate, int Rating, string FormatString = "")
{
    public override string ToString()
    {
        if (string.IsNullOrEmpty(FormatString))
            return $"{GivenName} {FamilyName}";
        return string.Format(FormatString, GivenName, FamilyName);
    }
}


    public List<Person> GetPeople()
    {
        List<Person> p = new()
        {
            new Person(1, "John", "Koenig", new DateTime(1975, 10, 17), 6, ""),
            new Person(2, "Dylan", "Hunt", new DateTime(2000, 10, 2), 8, ""),
            new Person(3, "Leela", "Turanga", new DateTime(1999, 3, 28), 8, "{1} {0}"),
            new Person(4, "John", "Crichton", new DateTime(1999, 3, 19), 7, ""),
            new Person(5, "Dave", "Lister", new DateTime(1988, 2, 15), 9, ""),
            new Person(6, "Laura", "Roslin", new DateTime(2003, 12, 8), 6, ""),
            new Person(7, "John", "Sheridan", new DateTime(1994, 1, 26), 6, ""),
            new Person(8, "Dante", "Montana", new DateTime(2000, 11, 1), 5, ""),
            new Person(9, "Isaac", "Gampu", new DateTime(1977, 9, 10), 4, ""),
        };
        return p;
    }


    public Person GetPerson(int id)
    {
        return GetPeople().First(p => p.Id == id);
    }


public class PersonReader
{
    HttpClient client =
        new() { BaseAddress = new Uri("http://localhost:9874") };
    public async Task<List<Person>> GetPeopleAsync()
    {
        HttpResponseMessage response =
            await client.GetAsync("people");

        if (!response.IsSuccessStatusCode)
            throw new Exception($"Unable to retrieve People. Status code {response.StatusCode}");

        var stringResult =
            await response.Content.ReadAsStringAsync();
        var result = JsonConvert.DeserializeObject<List<Person>>(stringResult);
        if (result is null)
            throw new JsonException("Unable to deserialize List<Person> object (json object may be empty)");
        return result;
    }
}
